This code if for SweetAlert2 to send async requests
/*if (result.isConfirmed) {
    (async () => {
                            
        for(i in result.value)
        {
            name = result.value[i].firstname + ' ' +result.value[i].lastname
            txt = 'Writer'
            const { value: accept } = await swalWithBootstrapButtons.fire({
                title: txt,
                showCancelButton: true,
                reverseButtons: true,
                text: `Press \"Continue\" & Place Key On Scanner To Write: ` + name,
                confirmButtonText: 'Continue',
                })

                if (accept) {
                    let url = '%swriter/' + JSON.stringify(name)
                    return fetch(url).then(response => {
                        if (!response.ok) {
                        throw new Error(response.statusText)
                        }
                        Swal.fire('Saved!', '', 'success')
                    })
                    .catch(error => {
                        Swal.showValidationMessage(
                        `Request failed: ${error}`
                        )
                    })
                    const { value: cont } = await swalBtnOkBootstrap.fire({
                        title: 'Wrote!',
                        icon: 'success',
                        text: `Successfully Wrote: ` + name,
                        confirmButtonText: 'OK',
                    })
                }
                else
                {
                    const { value: cont } = await swalBtnOkBootstrap.fire({
                        title: 'Cancelled Write',
                        icon: 'info',
                        text: name + ': Was not written',
                        confirmButtonText: 'OK',
                    })
                }
        }
    })()
}*/
/*else if ( result.dismiss === Swal.DismissReason.cancel) 
{   
    swalBtnOkBootstrap.fire(
    {
        title: 'Cancelled',
        icon: 'info',
        showLoaderOnConfirm: true,
        width: 600,
    })
}*/





/*id = document.getElementById('id').value
name = document.getElementById('name').value
swalBtnOkBootstrap.fire(
{
    title: name,
    icon: 'info',
    confirmButtonText: 'OK',
    html: `
    <div class="big margin">
        <input type="checkbox" name="lunch-cbx" id="lunch-cbx" /> 
        <label for="lunch-cbx">Selecciona Aqui Si No Tomaste Almuerzo</label>
    </div>
    <hr/>
    `,
    width: 600,
    allowOutsideClick: false,
    preConfirm: () => {
        id = document.getElementById('id').value
        name = document.getElementById('name').value
        lunch = document.getElementById('lunch-cbx').checked
        data = {'id': id, 'text': name, 'lunch': lunch}
        let url = '%sclockout/' + JSON.stringify(data)
        return fetch(url).then(response => {
            if (!response.ok) {
            throw new Error(response.statusText)
            }
            return response.json()
        })
        .catch(error => {
            Swal.showValidationMessage(
            `Request failed: ${error}`
            )
        })
    }          
}).then((result) => {alert(result.value.message) })*/

from flask import Flask, render_template, request, flash, Blueprint, session, redirect, url_for, jsonify
import requests
import json
import datetime

app = Flask(__name__)

def start_server():
    app.run(host='0.0.0.0', port=5000, use_reloader=True, debug=True)
    # app.run(host='192.168.1.79', port=5005)


@app.route('/', methods=['GET', 'POST'])
def index():
    return render_template('hours.html')

@app.route('/get_hours', methods=['POST'])
def get_hours():
    api_url = "http://192.168.1.65:5005/"
    # payload = {"device": getserial()}
    payload = {"device": "12345"}
    headers= {'content-type': 'application/json'}
    data = json.dumps(payload)
    res = requests.get(api_url+"getHours", data=data, headers=headers)
    res = json.loads(res.text)
    print(res)
    # clkin = datetime.datetime.strptime(dt_in, "%m/%d/%Y %I:%M %p").strftime("%Y-%m-%d %H:%M:%S")
    data = {}
    for i in res:
        if res[i]['clock_in'] is not None or res[i]['clock_in'] != '':
            clk_in = datetime.datetime.strptime(res[i]['clock_in'], '%a, %d %b %Y %H:%M:%S GMT').strftime("%I:%M:%S %p")
            clk_out = datetime.datetime.strptime(res[i]['clock_out'], '%a, %d %b %Y %H:%M:%S GMT').strftime("%I:%M:%S %p")
        else:
            clk_in = res[i]['clock_in']
            clk_out = res[i]['clock_out']
            
        date = res[i]['date']
        hours = res[i]['hours']
        if res[i]['no_lunch']:
            lunch = "NO"
        else:
            lunch = "SI"
        data[i] = {}
        data[i]['date'] = date
        data[i]['clk_in'] = clk_in
        data[i]['clk_out'] = clk_out
        data[i]['hours'] = hours
        data[i]['no_lunch'] = lunch

        
    return render_template("hours.html", data=data)

if __name__ == '__main__':
    start_server()